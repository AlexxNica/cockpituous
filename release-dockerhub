#!/bin/sh -euf
#
# release-dockerhub
#
# A script that triggers an automated build at the Docker Hub. It does
# this by updating a GitHub repository. The automated build must have
# been previously configured.
#
# We update the version number in a Dockerfile, and tests that
# the resulting URLs can be fetched. Commits the changes and pushes
# the result.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -m srpm    RELEASE_SRPM=srpm      Path to SRPM
# -q         RELEASE_QUIET=1        Make output more quiet
# -x         RELEASE_TRANSACTION=1  SIGSTOP before pushing the dist-git commit
# -v         RELEASE_VERBOSE=1      Make output more verbose
#

set -euf

# Various arguments
TRANSACTION=${RELEASE_TRANSACTION:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
SRPM=${RELEASE_SRPM:-$PWD/srpm}

REPO=""
WORKDIR=""
PUSH=""
CLEANUP=""

usage()
{
    echo "usage: release-dockerhub [-qvx] [-s SRPM] REPO" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-dockerhub: $@" >&2
}

prepare()
{
    local version release tmpfile

    WORKDIR="dockerhub"

    trace "Checking out Github repo $REPO"

    rm -rf $WORKDIR
    git clone git@github.com:$REPO $WORKDIR

    trace "Updating Dockerfile version info"

    # Dig out the latest build
    tmpfile=$(mktemp .dockerhub-srpm.XXXXXX)
    LC_ALL=C rpm -qp --info $SRPM > $tmpfile
    version=$(sed -n -e 's/^Version\s*:\s*\(\S\+\).*/\1/p' $tmpfile)
    release=$(sed -n -e 's/^Release\s*:\s*\([0-9]\+\).*/\1/p' $tmpfile)

    if [ -z "$release" -o -z "$version" ]; then
        message "couldn't get version info from SRPM"
        exit 1
    fi

    sed -i -e "s/ENV VERSION .*/ENV VERSION $version/" \
           -e "s/ENV RELEASE .*/ENV RELEASE $release/" \
           $WORKDIR/Dockerfile

    trace "Committing changes to Dockerfile"

    git -C $WORKDIR commit --message="Update to version $version-$release" Dockerfile
    git -C $WORKDIR tag --annotate --message="Version $version-$release" "$version-$release"

    PUSH="master $version-$release"
    CLEANUP="$CLEANUP $tmpfile"
}

commit()
(
    trace "Pushing changes to Dockerfile"

    git -C $WORKDIR push origin $PUSH
    rm $CLEANUP
)

while getopts "m:qvx" opt; do
    case "$opt" in
    m)
        SRPM="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 1 ]; then
    usage
fi

REPO="$1"

if [ -z "$SRPM" ]; then
    message "no srpm specified"
    exit 2
elif [ ! -f "$SRPM" ]; then
    message "srpm source not found: $SRPM"
    exit 1
fi

prepare

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit
