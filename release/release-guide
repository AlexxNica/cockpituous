#!/bin/sh -euf
#
# release-guide
#
# A release that commits the HTML guide to another git repository
#
# We update the version number in a Dockerfile, and tests that
# the resulting URLs can be fetched. Commits the changes and pushes
# the result.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -f tgz     RELEASE_TARBALL=tbz    The tarball to extract documentation from
# -q         RELEASE_QUIET=1        Make output more quiet
# -x         RELEASE_TRANSACTION=1  SIGSTOP before publishing the Github draft
# -v         RELEASE_VERBOSE=1      Make output more verbose
# -z         RELEASE_CHECK=1        Check access and configuration
#

set -euf

# Various arguments
TRANSACTION=${RELEASE_TRANSACTION:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
SRPM=${RELEASE_SRPM:-$PWD/srpm}
TARBALL=${RELEASE_TARBALL:-}
CHECK=${RELEASE_CHECK:-0}

REPO=""
WORKDIR="guide-commit"
SOURCE=""

usage()
{
    echo "usage: release-guide [-qvxz] [-f TARBALL] SOURCE REPO" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-guide: $@" >&2
}

parse_version()
{
    echo "$@" | sed -n 's/.\+-\([0-9].*\)/\1/p'
}

check()
{
    "$(dirname $0)/check-git-rw" git@github.com "$REPO"
}

prepare()
{
    local version subdir

    trace "Extracting the tarball $TARBALL"

    rm -rf $WORKDIR/extract
    mkdir -p $WORKDIR/extract
    tar -f $TARBALL -C $WORKDIR/extract -x

    trace "Checking out Github repo $REPO"

    cd $WORKDIR

    if [ -d repo ]; then
        git -C repo clean -fdx
        git -C repo fetch origin
        git -C repo checkout master
        git -C repo reset --hard origin/master
    else
        git clone git@github.com:$REPO repo
    fi

    cd extract

    set +f
    subdir=$(echo *)
    set -f

    version="$(parse_version $subdir)"
    if [ -z "$version" ]; then
        message "couldn't determine version from $subdir"
        exit 1
    fi

    cd ..

    trace "Commiting documentation for version $version"
    mkdir -p repo/guide/
    rm -rf repo/guide/$version
    mv -n extract/$subdir/$SOURCE/ repo/guide/$version
    rm -rf repo/guide/latest
    cp -rp repo/guide/$version repo/guide/latest

    git -C repo add guide/

    if git -C repo diff --staged --exit-code; then
        trace "Already uploaded documentation for $version"
        exit 0
    fi

    trace "Committing changes"
    git -C repo commit --message="Update guide to version $version"
    cd ..
}

commit()
(
    trace "Pushing changes to guide"
    git -C $WORKDIR/repo push origin master
)

while getopts "f:qvxz" opt; do
    case "$opt" in
    f)
        TARBALL="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 2 ]; then
    usage
fi

SOURCE="$1"
REPO="$2"

if [ -z "$TARBALL" ]; then
    message "no tarball input specified"
    exit 2
fi

if [ $CHECK -eq 1 ]; then
    check
    exit 0
fi

prepare

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit
