#!/usr/bin/env python

# Modified from a minigzip.py demo program included with python
#
# Demo program for zlib; it compresses or decompresses files, but *doesn't*
# delete the original.  This doesn't support all of gzip's options.
#
# The 'gzip' module in the standard library provides a more complete
# implementation of gzip-format files.

#
# License: PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
#
# The full text of the license is available here
# http://svn.python.org/projects/python/trunk/LICENSE
#

import os
import sys
import zlib

FTEXT, FHCRC, FEXTRA, FNAME, FCOMMENT = 1, 2, 4, 8, 16

def read32(input):
    v = ord(input.read(1))
    v += (ord(input.read(1)) << 8 )
    v += (ord(input.read(1)) << 16)
    v += (ord(input.read(1)) << 24)
    return v

def fatal(message):
    sys.stderr.write("gzplit: {0}\n".format(str(message)));
    sys.exit(1)

class Buffer:
    def __init__(self, f):
        self.f = f
        self.buf = ''
    def push(self, piece):
        self.buf = piece + self.buf
    def readall(self):
        result = self.buf + self.f.read()
        self.buf = ''
        return result
    def read(self, n=None):
        if n is None:
            return self.readall()
        avail = len(self.buf)
        if n > avail:
            result = self.buf + self.f.read(n - avail)
            self.buf = ''
        else:
            result = self.buf[:n]
            self.buf = self.buf[n:]
        return result

def decompress(input):
    magic = input.read(2)
    if magic == "":
        return False
    if magic != '\037\213':
        fatal('not a gzipped file')
    if ord(input.read(1)) != 8:
        fatal("unknown compression method")
    flag = ord(input.read(1))
    input.read(4 + 1 + 1)               # Discard modification time,
                                        # extra flags, and OS byte.

    # The default filename
    filename = None

    # Read & discard the extra field, if present
    if flag & FEXTRA:
        xlen = ord(input.read(1))
        xlen += 256 * ord(input.read(1))
        input.read(xlen)

    # Use the filename
    if flag & FNAME:
        name = ""
        while True:
            s = input.read(1)
            if s == '\0':
                break
            name += s
        if name and name != "-":
            filename = os.path.basename(name)

    # Read and discard a null-terminated string containing a comment
    if flag & FCOMMENT:
        while True:
            s = input.read(1)
            if s == '\0':
                break

    # Read and discard the 16-bit header CRC
    if flag & FHCRC:
        input.read(2)

    if filename:
        output = open(filename, "wb")
    else:
        output = sys.stdout

    decomp = zlib.decompressobj(-zlib.MAX_WBITS)
    crcval = zlib.crc32("") & 0xffffffffL
    length = 0
    done = False
    while not done:
        data = input.read(1024)
        if data == "":
            data = decompobj.flush()
            done = True
            break
        data = decomp.decompress(data)
        output.write(data)
        length += len(data)
        crcval = zlib.crc32(data, crcval) & 0xffffffffL
        if decomp.unused_data != "":
            input.push(decomp.unused_data)
            done = True
            break

    # We've read to the end of the file
    crc32 = read32(input)
    isize = read32(input)
    if isize != length:
        fatal("incorrect length of data")
    if crc32 != crcval:
        fatal("the CRC check failed" + str(crc32) + " " + str(crcval))

    output.flush()
    if filename:
        output.close()
    return True

def main():
    if len(sys.argv) == 1:
        input = Buffer(sys.stdin)
    elif len(sys.argv) == 2:
        input = Buffer(open(sys.argv[1], "rb"))
    else:
        print 'usage: gzplit file.gz'
        sys.exit(2)

    while decompress(input):
        pass
    sys.exit(0)

if __name__ == '__main__':
    main()
